package ${ppn}.${ppsc.pci.cpName};

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

##如果存在in或not in子句，需要添加List数据类型
#foreach($col in $reqCols)
    #if(${col.in} == true)
    import java.util.ArrayList;
    import java.util.List; #break
    #end
#end

#if(${pagging} == true)
import com.alibaba.fastjson.JSONObject;
#else
    #if("$!res" != "")
    import com.alibaba.fastjson.JSONObject;
    #else
    import com.alibaba.fastjson.JSONObject;
    #end
#end

import ${ppn}.${ppsc.pci.servName}.I${ao.apiName}Service;
#if("$!res" != "")
import ${ppn}.${ppsc.pci.epName}.${res.upperCaseName};
#end
#if("$!req" != "" || ${pagging} == true)
    ##需要分页，则需要有分页相关的参数
import org.springframework.web.bind.annotation.RequestParam;
import io.swagger.annotations.ApiParam;
#end
#if("$!req" != "")
    ##返回实体不为空，则需要实体类引用
import ${ppn}.${ppsc.pci.epName}.${req.upperCaseName};
#end

##请求体、响应体均不为空
#if("$!res" != "" && "$!req" != "")
/**
* @desc：${ao.apiDesc}
*/
@Api(value = "${ao.apiName}", description="${ao.apiDesc}", tags = "${ao.apiGroup}")
@Controller
@RequestMapping(value = "/${ao.apiNameFullLow}", method = { RequestMethod.GET, RequestMethod.POST })
public class ${ao.apiName}Controller {
@Autowired
@Qualifier("${ao.apiNameLow}Service")
private I${ao.apiName}Service ${ao.apiNameLow}Service;

@RequestMapping(value = "/${ao.apiNameLow}Handler")
@ResponseBody
@ApiOperation(value = "${ao.apiOperation} ${res.upperCaseName} 对象", httpMethod = "GET", notes = "${ao.apiOperation} ${res.upperCaseName}对象", response = ${res.upperCaseName}.class, responseContainer = "List", tags = "${ao.apiGroup}")
    #if(${pagging} == true) ##是否需要查询分页
    public JSONObject ${ao.apiNameLow}Handler(
    @ApiParam(required=true, value = "(=)分页查询序号", name = "pageNo", example = "1") @RequestParam(name = "pageNo", defaultValue = "1") Integer pageNo,
    @ApiParam(required=true, value = "(=)分页查询尺寸", name = "pageSize", example = "10") @RequestParam(name = "pageSize", defaultValue = "10") Integer pageSize,
        #foreach($col in $reqCols)
            #if(${col.in} == true)
            @ApiParam(value = "(${col.reqBody})${col.desc}", name = "${col.javaname}") @RequestParam(required=false, name = "${col.javaname}") String ${col.javaname}#if($velocityCount != $reqCols.size()),#end
            #else
            @ApiParam(value = "(${col.reqBody})${col.desc}", name = "${col.javaname}") @RequestParam(required=false, name = "${col.javaname}") ${col.javaType} ${col.javaname}#if($velocityCount != $reqCols.size()),#end
            #end
        #end) {
        ${req.upperCaseName} ${req.lowerCaseName}Params = new ${req.upperCaseName}();
        #foreach($col in $reqCols)
            #if(${col.in} == true)
            //in/not in子句參數，需要先转化为List，前台输入参数格式为"value1,value2,value3"
                #if(${col.javaType} == 'Double')
                List<${col.javaType}> ${col.javaname}List = new ArrayList<${col.javaType}>();
                if(null != ${col.javaname} && !${col.javaname}.equals("")) {
                for(String v : ${col.javaname}.split(",")) {
                    ${col.javaname}List.add(Double.parseDouble(v));
                }
                    ${req.lowerCaseName}Params.set${col.upname}List(${col.javaname}List);
                }
                #elseif(${col.javaType} == 'Long')
                List<${col.javaType}> ${col.javaname}List = new ArrayList<${col.javaType}>();
                if(null != ${col.javaname} && !${col.javaname}.equals("")) {
                for(String v : ${col.javaname}.split(",")) {
                    ${col.javaname}List.add(Long.parseLong(v));
                }
                    ${req.lowerCaseName}Params.set${col.upname}List(${col.javaname}List);
                }
                #elseif(${col.javaType} == 'Integer')
                List<${col.javaType}> ${col.javaname}List = new ArrayList<${col.javaType}>();
                if(null != ${col.javaname} && !${col.javaname}.equals("")) {
                for(String v : ${col.javaname}.split(",")) {
                    ${col.javaname}List.add(Integer.parseInt(v));
                }
                    ${req.lowerCaseName}Params.set${col.upname}List(${col.javaname}List);
                }
                #elseif(${col.javaType} == 'String')
                List<${col.javaType}> ${col.javaname}List = new ArrayList<${col.javaType}>();
                if(null != ${col.javaname} && !${col.javaname}.equals("")) {
                for(String v : ${col.javaname}.split(",")) {
                    ${col.javaname}List.add(v);
                }
                    ${req.lowerCaseName}Params.set${col.upname}List(${col.javaname}List);
                }
                #end
            #else
                ${req.lowerCaseName}Params.set${col.upname}(${col.javaname});
            #end
        #end
    return ${ao.apiNameLow}Service.${ao.apiNameLow}Handler(${req.lowerCaseName}Params, pageNo, pageSize);
    }
    #else
    public JSONObject ${ao.apiNameLow}Handler(
        #foreach($col in $reqCols)
            #if(${col.in} == true)
            @ApiParam(value = "(${col.reqBody})${col.desc}", name = "${col.javaname}")
            @RequestParam(required=false, name = "${col.javaname}") String ${col.javaname}#if($velocityCount != $reqCols.size()),#end
            #else
            @ApiParam(value = "(${col.reqBody})${col.desc}", name = "${col.javaname}")
            @RequestParam(required=false, name = "${col.javaname}") ${col.javaType} ${col.javaname}#if($velocityCount != $reqCols.size()),#end#end#end) {
        ${req.upperCaseName} ${req.lowerCaseName}Params = new ${req.upperCaseName}();
        #foreach($col in $reqCols)
            #if(${col.in} == true)
            //in/not in子句參數，需要先转化为List，前台输入参数格式为"value1,value2,value3"
                #if(${col.javaType} == 'Double')
                List<${col.javaType}> ${col.javaname}List = new ArrayList<${col.javaType}>();
                if(null != ${col.javaname} && !${col.javaname}.equals("")) {
                for(String v : ${col.javaname}.split(",")) {
                    ${col.javaname}List.add(Double.parseDouble(v));
                }
                    ${req.lowerCaseName}Params.set${col.upname}List(${col.javaname}List);
                }
                #elseif(${col.javaType} == 'Long')
                List<${col.javaType}> ${col.javaname}List = new ArrayList<${col.javaType}>();
                if(null != ${col.javaname} && !${col.javaname}.equals("")) {
                for(String v : ${col.javaname}.split(",")) {
                    ${col.javaname}List.add(Long.parseLong(v));
                }
                    ${req.lowerCaseName}Params.set${col.upname}List(${col.javaname}List);
                }
                #elseif(${col.javaType} == 'Integer')
                List<${col.javaType}> ${col.javaname}List = new ArrayList<${col.javaType}>();
                if(null != ${col.javaname} && !${col.javaname}.equals("")) {
                for(String v : ${col.javaname}.split(",")) {
                    ${col.javaname}List.add(Integer.parseInt(v));
                }
                    ${req.lowerCaseName}Params.set${col.upname}List(${col.javaname}List);
                }
                #elseif(${col.javaType} == 'String')
                List<${col.javaType}> ${col.javaname}List = new ArrayList<${col.javaType}>();
                if(null != ${col.javaname} && !${col.javaname}.equals("")) {
                for(String v : ${col.javaname}.split(",")) {
                    ${col.javaname}List.add(v);
                }
                    ${req.lowerCaseName}Params.set${col.upname}List(${col.javaname}List);
                }
                #end
            #else
                ${req.lowerCaseName}Params.set${col.upname}(${col.javaname});
            #end
        #end
    return ${ao.apiNameLow}Service.${ao.apiNameLow}Handler(${req.lowerCaseName}Params);
    }
    #end
}
    ##请求体为空，响应体不为空，这里是指不带条件的查询语句
#elseif("$!res" != "" && "$!req" == "" && ${ao.apiOperation} == 'select')
/**
* @desc：${ao.apiDesc}
*/
@Api(value = "${ao.apiName}", description="${ao.apiDesc}", tags = "${ao.apiGroup}")
@Controller
@RequestMapping(value = "/${ao.apiNameFullLow}", method = { RequestMethod.GET, RequestMethod.POST })
public class ${ao.apiName}Controller {
@Autowired
@Qualifier("${ao.apiNameLow}Service")
private I${ao.apiName}Service ${ao.apiNameLow}Service;

@RequestMapping(value = "/${ao.apiNameLow}Handler")
@ResponseBody
@ApiOperation(value = "${ao.apiOperation} ${res.upperCaseName}对象", httpMethod = "GET", notes = "${ao.apiOperation} ${res.upperCaseName}对象", response = ${res.upperCaseName}.class, responseContainer = "List", tags = "${ao.apiGroup}")
    #if(${pagging} == true)
    public JSONObject ${ao.apiNameLow}Handler(
    @ApiParam(required=true, value = "(=))分页查询序号", name = "pageNo", example = "1") @RequestParam(name = "pageNo", defaultValue = "1") Integer pageNo,
    @ApiParam(required=true, value = "(=))分页查询尺寸", name = "pageSize", example = "10") @RequestParam(name = "pageSize", defaultValue = "10") Integer pageSize) {
    JSONObject json = ${ao.apiNameLow}Service.${ao.apiNameLow}Handler(pageNo, pageSize);
    return json;
    }
    #else
    public JSONObject ${ao.apiNameLow}Handler() {
    return ${ao.apiNameLow}Service.${ao.apiNameLow}Handler();
    }
    #end
}
    ##请求体不为空，响应体为空
#elseif("$!res" == "" && "$!req" != "")
/**
* @desc：${ao.apiDesc}
*/
@Api(value = "${ao.apiName}", description="${ao.apiDesc}", tags = "${ao.apiGroup}")
@Controller
@RequestMapping(value = "/${ao.apiNameFullLow}", method = { RequestMethod.GET, RequestMethod.POST })
public class ${ao.apiName}Controller {
@Autowired
@Qualifier("${ao.apiNameLow}Service")
private I${ao.apiName}Service ${ao.apiNameLow}Service;

@RequestMapping(value = "/${ao.apiNameLow}Handler")
@ResponseBody
@ApiOperation(value = "${ao.apiOperation}所有${req.upperCaseName}对象", httpMethod = "GET", notes = "${ao.apiOperation}所有${req.upperCaseName}对象", response = ${req.upperCaseName}.class, responseContainer = "List", tags = "${ao.apiGroup}")
public JSONObject ${ao.apiNameLow}Handler(
    #foreach($col in $reqCols)
        #if(${col.in} == true)
        @ApiParam(value = "(${col.reqBody})${col.desc}", name = "${col.javaname}")
        @RequestParam(required=false, name = "${col.javaname}") String ${col.javaname}#if($velocityCount != $reqCols.size()),#end
        #else
        @ApiParam(value = "(${col.reqBody})${col.desc}", name = "${col.javaname}")
        @RequestParam(required=false, name = "${col.javaname}") ${col.javaType} ${col.javaname}#if($velocityCount != $reqCols.size()),#end
        #end
    #end) {
    ${req.upperCaseName} ${req.lowerCaseName}Params = new ${req.upperCaseName}();
    #foreach($col in $reqCols)
        #if(${col.in} == true)
        //in/not in子句參數，需要先转化为List，前台输入参数格式为"value1,value2,value3"
            #if(${col.javaType} == 'Double')
            List<${col.javaType}> ${col.javaname}List = new ArrayList<${col.javaType}>();
            if(null != ${col.javaname} && !${col.javaname}.equals("")) {
            for(String v : ${col.javaname}.split(",")) {
                ${col.javaname}List.add(Double.parseDouble(v));
            }
                ${req.lowerCaseName}Params.set${col.upname}List(${col.javaname}List);
            }
            #elseif(${col.javaType} == 'Long')
            List<${col.javaType}> ${col.javaname}List = new ArrayList<${col.javaType}>();
            if(null != ${col.javaname} && !${col.javaname}.equals("")) {
            for(String v : ${col.javaname}.split(",")) {
                ${col.javaname}List.add(Long.parseLong(v));
            }
                ${req.lowerCaseName}Params.set${col.upname}List(${col.javaname}List);
            }
            #elseif(${col.javaType} == 'Integer')
            List<${col.javaType}> ${col.javaname}List = new ArrayList<${col.javaType}>();
            if(null != ${col.javaname} && !${col.javaname}.equals("")) {
            for(String v : ${col.javaname}.split(",")) {
                ${col.javaname}List.add(Integer.parseInt(v));
            }
                ${req.lowerCaseName}Params.set${col.upname}List(${col.javaname}List);
            }
            #elseif(${col.javaType} == 'String')
            List<${col.javaType}> ${col.javaname}List = new ArrayList<${col.javaType}>();
            if(null != ${col.javaname} && !${col.javaname}.equals("")) {
            for(String v : ${col.javaname}.split(",")) {
                ${col.javaname}List.add(v);
            }
                ${req.lowerCaseName}Params.set${col.upname}List(${col.javaname}List);
            }
            #end
        #else
            ${req.lowerCaseName}Params.set${col.upname}(${col.javaname});
        #end
    #end
return ${ao.apiNameLow}Service.${ao.apiNameLow}Handler(${req.lowerCaseName}Params);
}
}
#end






