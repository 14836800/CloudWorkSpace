<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	   http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	   http://www.springframework.org/schema/tx
	   http://www.springframework.org/schema/tx/spring-tx.xsd
	   http://www.springframework.org/schema/aop
	   http://www.springframework.org/schema/aop/spring-aop.xsd
	   http://www.springframework.org/schema/context
	   http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- 启用注解 -->
    <context:annotation-config/>

    <!-- 自动扫描组件，当前采用整个工程扫描 -->
    <context:component-scan base-package="${pps.pci.fpName}.${pps.pci.spName}"/>

    <!--切面分析自动代理-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!--加载数据库配置信息到Spring容器当中 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:jdbc.properties</value>
        </property>
    </bean>

	#set( $driverClasss = '$'+'{jdbc.driverClasss}' )
	#set( $jdbcUrl = '$'+'{jdbc.jdbcUrl}' )
	#set( $username = '$'+'{jdbc.username}' )
	#set( $password = '$'+'{jdbc.password}' )
	#set( $initialSize = '$'+'{jdbc.initialSize}' )
	#set( $maxActive = '$'+'{jdbc.maxActive}' )
	#set( $maxIdle = '$'+'{jdbc.maxIdle}' )
	#set( $minIdle = '$'+'{jdbc.minIdle}' )
	#set( $maxWait = '$'+'{jdbc.maxWait}' )
    <bean id="acDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="driverClassName" value="$driverClasss"/>
        <property name="url" value="$jdbcUrl"/>
        <property name="username" value="$username"/>
        <property name="password" value="$password"/>

        <!-- 初始化连接大小 -->
        <property name="initialSize" value="$initialSize"></property>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="$maxActive"></property>
        <!-- 连接池最小空闲-->
        <property name="minIdle" value="$minIdle"></property>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="$maxWait"></property>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="testWhileIdle" value="true"/>
        <property name="keepAlive" value="true"/>
        <property name="killWhenSocketReadTimeout" value="false"/>

        <!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="false"/>

        <!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->
        <property name="defaultAutoCommit" value="true"/>

        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
		#if(${dbType} == 'mysql')
            <property name="validationQuery" value="SELECT 'x'"/>
		#elseif(${dbType} == 'oracle')
            <property name="validationQuery">
                <value>select * from dual</value>
            </property>
		#end

        <!--
	  打开PSCache，并且指定每个连接上PSCache的大小
	  如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false
-->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20"/>

        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="stat,wall,log4j2"/>

        <!--
			如果配置了proxyFilters，此配置可以不配置
			druid.stat.mergeSql=true 合并执行的相同sql，避免因为参数不同而统计多条sql语句
			druid.stat.slowSqlMillis=10000 用来配置SQL慢的标准，执行时间超过slowSqlMillis的就是慢
		<property name="connectionProperties" value="druid.stat.mergeSql=true;druid.stat.slowSqlMillis=10000" />
		 -->
        <!-- 监控统计拦截的filters -->
        <!-- 并在filters属性中配置了log4j -->
        <property name="proxyFilters">
            <list>
                <ref bean="statFilter"/>
                <ref bean="logFilter"/>
            </list>
        </property>
    </bean>

    <!-- 慢SQL记录-->
    <bean id="statFilter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="mergeSql" value="true"/>
        <property name="slowSqlMillis" value="10000"/>
        <property name="logSlowSql" value="true"/>
    </bean>

    <!--日志监控-->
    <bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
        <property name="resultSetLogEnabled" value="false"/>
        <property name="statementExecutableSqlLogEnable" value="true"/>
    </bean>

    <!-- 配置druid监控spring jdbc -->
    <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"/>
    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
        <property name="patterns">
            <list>
                <value>${pps.pci.fpName}.${pps.pci.spName}.service.*</value>
                <value>${pps.pci.fpName}.${pps.pci.spName}.dao.*</value>
            </list>
        </property>
    </bean>

    <aop:config>
        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut"/>
    </aop:config>
    <!--druid 配置 end-->

    <!--配置jdbcTemplate模板 ,若采用JdbcDaoSupport,可以不需要配置模版 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref bean="acDataSource"/>
        </property>
    </bean>

    <!-- 配置namedParameterJdbcTemplate ，具名参数 -->
    <bean id="namedParameterJdbcTemplate"
          class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <constructor-arg ref="acDataSource"></constructor-arg>
    </bean>

    <!-- mybatis和spring完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="acDataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:${pps.pci.mfdName}/**/*.xml"></property>
    </bean>

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory"/>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 ,包下的类需要使用@MapperScan注解,否则容器注入会失败,本框架在Dao层添加了@Repository,可不配置该注解 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--这里需要根据实际的DAO文件所在包配置-->
        <property name="basePackage" value="${pps.pci.fpName}.${pps.pci.spName}.${pps.pci.dpName}"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- 事务管理-对象 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="acDataSource"/>
    </bean>

    <!-- 事务管理-通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="create*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="merge*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="put*" propagation="REQUIRED"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="count*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="list*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!-- 事物管理-组装 -->
    <aop:config>
        <aop:pointcut id="serviceMethod" expression="execution(* ${pps.pci.fpName}.${pps.pci.spName}.${pps.pci.servName}..*(..))"/>
        <aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice"/>
    </aop:config>
</beans>