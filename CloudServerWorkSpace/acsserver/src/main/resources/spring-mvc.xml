<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
	   http://www.springframework.org/schema/context/spring-context.xsd
	   http://www.springframework.org/schema/mvc
	   http://www.springframework.org/schema/mvc/spring-mvc.xsd
	   http://www.springframework.org/schema/util
	   http://www.springframework.org/schema/util/spring-util.xsd">
    <!-- 启用MVC注解 -->
    <mvc:annotation-driven/>
    <!-- 自动扫描 @Controller -->
    <context:component-scan base-package="com.acs.controller"/>

    <!-- 启用MVC接口跨域配置 -->
    <mvc:cors>
        <mvc:mapping path="/**"
                     allowed-origins="*"
                     allowed-methods="POST, GET, OPTIONS, DELETE, PUT"
                     allowed-headers="*"
                     allow-credentials="true"/>
    </mvc:cors>

    <!-- 将 springSwaggerConfig加载到spring容器，属于Swagger1.0配置,2.0不需要 -->
    <!-- <bean class="com.mangofactory.swagger.configuration.SpringSwaggerConfig"
        /> -->
    <!-- 将自定义的swagger配置类加载到spring容器 -->
    <bean class="com.acs.swagger.SwaggerConfig"/>

    <!-- <mvc:default-servlet-handler /> -->

    <!-- 静态资源文件，不会被Spring MVC拦截，Swagger1.0与2.0均可以配置，两者静态站点不同，这与webjars有所不同，一个提供静态页面，另一个没有，并且访问地址也有所不同★ -->
    <mvc:resources mapping="/swagger/**" location="/WEB-INF/swagger/"/>

    <!--Swagger2.0配置 -->
    <!--Swagger资源重定向(仅作为后台使用不提供静态资源) -->
    <mvc:resources location="classpath:/META-INF/resources/"
                   mapping="swagger-ui.html"/>
    <mvc:resources location="classpath:/META-INF/resources/webjars/"
                   mapping="/webjars/**"/>

    <!-- <mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/"
        /> -->

    <bean name="jacksonObjectMapper"
          class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
        <property name="featuresToDisable">
            <array>
                <util:constant
                        static-field="com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_AS_TIMESTAMPS"/>
            </array>
        </property>
    </bean>

    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
    </bean>
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                    <property name="objectMapper" ref="jacksonObjectMapper"/>
                </bean>
            </list>
        </property>
    </bean>

    <bean id="internalResourceViewResolver"
          class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="suffix" value=".html"></property>
        <property name="prefix" value="/"></property>
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.JstlView"/>
    </bean>

    <!--&lt;!&ndash; 拦截器配置 (根据配置拦截，可根据需求取消配置注释) &ndash;&gt;-->
    <!--<mvc:interceptors>-->
    <!--&lt;!&ndash;使用 bean 定义一个 Interceptor，直接定义在 mvc:interceptors 下面的 Interceptor 将拦截所有的请求&ndash;&gt;-->
    <!--<bean class="com.acs.interceptor.AcsInterceptor"/>-->
    <!--<mvc:interceptor>-->
    <!--&lt;!&ndash;需要拦截的接口路径&ndash;&gt;-->
    <!--<mvc:mapping path="/dbcreator/getprojects"/>-->
    <!--&lt;!&ndash; 定义在 mvc:interceptor 下面的 Interceptor，表示对特定的请求进行拦截&ndash;&gt;-->
    <!--<bean class="com.acs.interceptor.AcsInterceptor"/>-->
    <!--</mvc:interceptor>-->
    <!--</mvc:interceptors>-->

    <!-- 文件上传配置 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="UTF-8"/>
        <!-- 上传文件大小限制为5G，5000*1024*1024 -->
        <property name="maxUploadSize" value="5242880000"/>
        <!-- 内存中的最大值 -->
        <!-- 设定文件上传时写入内存的最大值，如果小于这个参数不会生成临时文件，默认为10240 -->
        <property name="maxInMemorySize" value="40960"></property>
        <!-- 上传文件的临时路径 -->
        <!--<property name="uploadTempDir" value="fileUpload/temp"></property>-->
        <!-- 延迟文件解析 -->
        <property name="resolveLazily" value="true"/>
    </bean>
</beans>